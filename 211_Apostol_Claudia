#include <iostream>
#include <vector>
#include <stdlib.h>
#include <typeinfo>
#include <utility>
#include <bits/stdc++.h>
using namespace std;

class locuinta
{
protected:
    string numeclient;
    double supraf;
    double discount;
    static int nrloc;
public:
    static void locuinte()
    {
        cout<<"S-au creat "<<nrloc<<" locuinte"<<endl;
    }
    int ret_nrloc()
    {
        return nrloc;
    }
    locuinta(string nume="",double s=0,double di=0)
    {
        numeclient=nume;
    try
    {
        if (s<0)
            throw s;
    }
    catch (double x)
    {
        cout<<"Eroare in constructor, suprafata nu poate fi negativa.\n";
        exit(EXIT_FAILURE);
    }
        supraf=s;
     try
    {
        if (di<0||di>10)
            throw di;
    }
    catch (double x)
    {
        cout<<"Eroare in constructor, disconutul trebuie sa fie intre 0-10%.\n";
        exit(EXIT_FAILURE);
    }
        discount=di;
        nrloc++;
    }
    ~locuinta()
{

}
    virtual void citire(istream& in)
    {
        cout<<"Introduceti numele clientului: ";
        getline(in,numeclient);
        cout<<endl<<"Introduceti suprafata locuintei: ";
        double s;
        in>>s;
        try
    {
        if (s<0)
            throw s;
    }
    catch (double x)
    {
        cout<<"Suprafata nu poate fi negativa.\n";
        exit(EXIT_FAILURE);
    }
        supraf=s;

        int ok=0;
        while(ok==0)
        {cout<<endl<<"Introduceti discountul(0-10%): ";
        in>>discount;
        if(discount<0||discount>10)
            cout<<"Discount incorect";
        else ok=1;}

    }
    virtual void afisare(ostream& out)
    {
        out<<endl<<"Nume client: "<<numeclient<<endl;
        out<<"Suprafata locuintei: "<<supraf<<endl;
        out<<"Discount: "<<discount<<endl;

    }
    friend istream& operator>>(istream&in, locuinta& l)
    {
        l.citire(in);
        return in;
    }
    friend ostream& operator<<(ostream& out,locuinta& l)
    {
        l.afisare(out);
        return out;
    }
    locuinta& operator=(locuinta& l)
    {
        this->numeclient=l.numeclient;
        this->discount=l.discount;
        this->supraf=l.supraf;
        return *this;
    }
    locuinta( locuinta* const& l)
    {
         numeclient=l->numeclient;
         discount=l->discount;
         supraf=l->supraf;
         nrloc++;
    }
   virtual double chirie()
   {

   }
  // virtual double chirie()=0;
};
int locuinta::nrloc;
class apartament: public locuinta
{
protected:
    int etaj;
    double pret;
public:
    apartament(string nume="",double sup=0,double d=0,int e=0, double pr=0):locuinta(nume,sup,d)
    {
        etaj=e;
        pret=pr;
    }
    ~apartament()
    {

    }
    void citire(istream& in)
    {
        locuinta::citire(in);
        int ok=0;
        while(ok==0)
        {cout<<endl<<"Introduceti etajul: ";
        in>>etaj;
        if(etaj<0|| etaj>10)
            cout<<"Etaj incorect"<<endl;
            else ok=1;}
        cout<<endl<<"Introduceti pretul pe metru patrat: ";
        in>>pret;

    }
    void afisare(ostream& out)
    {
        locuinta::afisare(out);
        out<<"Etaj: "<<etaj;
        out<<endl<<"Pret pe metru patrat: "<<pret;
        out<<endl<<"Chiria pentru apartament: "<<chirie(*this);
    }
    friend istream& operator>>(istream&in, apartament& l)
    {
        l.citire(in);
        return in;
    }
    friend ostream& operator<<(ostream& out,apartament& l)
    {
        l.afisare(out);
        return out;
    }
    apartament& operator=(apartament& a)
    {
        this->locuinta::operator=(a);
        this->etaj=a.etaj;
        this->discount=a.discount;
        return *this;
    }
    double chirie(apartament &a)
    {
        double aux=a.pret*a.supraf;
        if(a.discount!=0)
        aux=(aux*a.discount)/100;
        return aux;
    }
};
class casa: public locuinta
{
protected:
    double curte;
    int nretaje;
    double pret;
    vector <double> etaj;
public:
    casa(string nume="",double sup=0,double d=0,double c=0,int nr=0,vector <double> et={}):locuinta(nume,sup,d)
    {
        curte=c;
        nretaje=nr;
        etaj=et;
    }
    ~casa()
    {

    }
    casa& operator=(casa& c)
    {
        this->locuinta::operator=(c);
        this->curte=c.curte;
        this->nretaje=c.nretaje;
        this->etaj=c.etaj;
        return *this;
    }
    void citire(istream& in)
    {
        locuinta::citire(in);
        cout<<endl<<"Introduceti suprafata curtii: ";
        in>>curte;
        cout<<endl<<"Introduceti cate etaje are casa: (0= parter) ";
        in>>nretaje;
        double aux;
        if(nretaje==0)
            {cout<<endl<<"Etajul 0 are suprafata: ";
            in>>aux;
            etaj.push_back(aux);
            cout<<endl;
            }
        else
        {cout<<endl;for(int i=0;i<=nretaje;i++)
        {
            ///0 etaje = doar parter
            /// sau 1 etaj = doar parter
            ///???
            cout<<"Etajul "<<i<<" are suprafata: ";
            in>>aux;
            etaj.push_back(aux);
            cout<<endl;
        }
        }
        cout<<"Introduceti pretul pentru metrul patrat de curte: ";
        in>>pret;

    }
    void afisare(ostream& out)
    {
        locuinta::afisare(out);
        out<<"Suprafata curtii: "<<curte<<endl<<"Numar de etaje: "<<nretaje<<endl;
        if(nretaje==0)
            cout<<"Etajul 0: "<<etaj[0]<<endl;
        else
        {for(int i=0;i<=nretaje;i++)
            {cout<<"Etajul "<<i<<": "<<etaj[i];
             cout<<endl;}
        }
        cout<<"Chiria pentru casa: "<<chirie(*this);

    }
     friend istream& operator>>(istream&in, casa& l)
    {
        l.citire(in);
        return in;
    }
    friend ostream& operator<<(ostream& out,casa& l)
    {
        l.afisare(out);
        return out;
    }
    double chirie(casa& c)
    {
        double aux=0;
        aux=pret*curte;
        return aux;
    }
};
void tip(locuinta*&l, int i)
{
    cout<<endl<<"Introduceti tipul de locuinta(a/c): ";
    string aux;
    cin>>aux;
    if(aux=="c")
    {
        l=new casa;

        cin.get();
        cin>>*l;
    }
    else if(aux=="a")
    {
        l=new apartament;
        cin.get();
        cin>>*l;
    }
    else cout<<"Caracter invalid";
}
template <class T>
class gestiune
{
    //set<pair<locuinta,string>> s;
    T *vect;
    int nr;
public:
    gestiune(T *v,int n)
    {
        nr=n;
        if(n>0)
        {vect=new T[n];
        for(int i=0;i<n;i++)
            vect[i]=v[i];
        }
    }
    gestiune(gestiune &g)
    {
         nr=g.n;
        if(nr>0)
        {vect=new T[nr];
        for(int i=0;i<nr;i++)
            vect[i]=g.v[i];
        }
    }
    ~gestiune()
    {
        delete []vect;
    }
//    int operator+=(locuinta&l)
//    {
//        vect.push_back(l);
//
//        return ret_nrloc();
//    }

};
typedef pair<locuinta, string> pairs;
//typedef pair<int,int> per;
typedef set<pairs> ss;

int main()
{
//    locuinta **l;
//    int n;
//    cout<<"Introduceti numarul de locuinte: ";
//    cin>>n;
//    l=new locuinta*[n];
//    for(int i=1;i<=n;i++)
//    {cout<<endl;tip(l[i],i);}
//
//    for(int i=1;i<=n;i++)
//        cout<<*l[i];

//    locuinta *l=new locuinta;
//    //apartament *m;
//    apartament *m;
//    cin>>*l;
//
//    //delete l;
//    cout<<*l;
//    string aux;
//    getline(cin,aux);
//    int j;
//    cin>>j;

//pair<int,int> p;

//set <pairs> ss;

//set<pairs> ::iterator c;
string tip;
vector <pairs> ciudi;
locuinta *a;
for(int i=0;i<3;i++)
    {
        cin>>tip;
        if(tip=="apartament")
            { a=new apartament;
            string aux;
                getline(cin,aux);
                cin>>*a;
                pairs x=make_pair(dynamic_cast<apartament*>(a),tip);
                cout<<x.first<<endl<<x.second;
               //ciudi.insert(x);
                ciudi.push_back(x);

            }
            else
            {
                if(tip=="casa")
                    {
                        a=new casa;
            string aux;
                getline(cin,aux);
                cin>>*a;
                pairs x=make_pair(*a,tip);
                cout<<x.first<<endl<<x.second;
                ciudi.push_back(x);
                    }
                    else cout<<"Tip invalid. Introduceti apartament/casa"<<endl;
            }
    }
    if(ciudi.empty()==1)
    cout<<"un cur";
    for(vector<pairs>::iterator it = ciudi.begin() ; it != ciudi.end(); ++it)
            {
               pairs i=*it;
               apartament ap=(apartament&)i.first;
               cout<<endl<<ap<<endl<<i.second<<endl;
               cout<<typeid(i.first).name();
            }

    return 0;
}

